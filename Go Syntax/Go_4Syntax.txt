Variables in Go:
Variables are named stoeage locations that hold values. In Go, Variables must be declared berfor the can be used. Go is a statically-typed language, meaning that the type of a Variables is known at compile time.

Naming Conventions:
    Go has specific rules and conventions for naming variables:
    1. Variable names must start with a letter or an underscore (_).
    2. Subsequent characters can be letters, numbers, or underscores.
    3. Go is case-sensitive, so age and Age are different variables.
    4. Use camelCase for variable names (e.g., firstName, ageInYears).
    5. For short-lived variables, especially in loops or small functions, single-letter variable names (e.g., i, j, k) are acceptable.
    6. Avoid using reserved keywords as variable names (e.g., func, var, if).

Zero Values
    When a variable is declared without an explicit initial value, Go assigns it a zero value. These zero values are:
    1. 0 for numeric types (int, float, etc.)
    2. false for the bool type
    3. "" (empty string) for the string type
    4. nil for pointers, interfaces, slices, maps, channels, and function types
    5. Understanding zero values is crucial because it affects the behavior of your program, especially when dealing with uninitialized variables.


Data Types in Go
    Basic Data Types
        These are the fundamental data types that form the building blocks of more complex types.

        1. Integers: Represent whole numbers. Go provides several integer types, both signed and unsigned.
            int: A signed integer type that is at least 32 bits, but its size is implementation-dependent (32 or 64 bits).
            int8: An 8-bit signed integer (-128 to 127).
            int16: A 16-bit signed integer (-32768 to 32767).
            int32: A 32-bit signed integer (-2147483648 to 2147483647).
            int64: A 64-bit signed integer (-9223372036854775808 to 9223372036854775807).
            uint: An unsigned integer type that is at least 32 bits, but its size is implementation-dependent (32 or 64 bits).
            uint8: An 8-bit unsigned integer (0 to 255). Also known as byte.
            uint16: A 16-bit unsigned integer (0 to 65535).
            uint32: A 32-bit unsigned integer (0 to 4294967295).
            uint64: A 64-bit unsigned integer (0 to 18446744073709551615).
            rune: An alias for int32. It represents a Unicode code point.

        2. Floating-Point Numbers: Represent numbers with a decimal point.
            float32: A 32-bit floating-point number.
            float64: A 64-bit floating-point number.

        3. Complex Numbers: Represent numbers with a real and imaginary part.
            complex64: A complex number with float32 real and imaginary parts.
            complex128: A complex number with float64 real and imaginary parts.

        4. Boolean: Represents a truth value, either true or false.

        5. String: Represents a sequence of characters. Strings in Go are immutable.

Aggregate Data Types
    These data types are composed of other data types. We will cover these in more detail in the next module.
    1.  Arrays: A fixed-size sequence of elements of the same type.
    2. Slices: A dynamically-sized sequence of elements of the same type.
    3. Structs: A collection of fields, each with its own type.

Reference Data Types
    These data types hold a reference to the underlying data.
    1. Pointers: A variable that stores the memory address of another variable.
    2. Maps: A collection of key-value pairs.
    3. Channels: A mechanism for communication between goroutines (concurrent functions).
    4. Interfaces: A type that specifies a set of methods that a type must implement.

Operators in Go
Operators are symbols that perform operations on one or more operands. Go provides a variety of operators, including arithmetic, comparison, logical, bitwise, assignment, and others.

Arithmetic Operators
These operators perform arithmetic calculations.
    +: Addition
    -: Subtraction
    *: Multiplication
    /: Division
    %: Modulus (remainder)


Comparison Operators
These operators compare two operands and return a boolean value.
    ==: Equal to
    !=: Not equal to
    >: Greater than
    <: Less than
    >=: Greater than or equal to
    <=: Less than or equal to

Logical Operators
These operators perform logical operations on boolean values.
    &&: Logical AND (returns true if both operands are true)
    ||: Logical OR (returns true if either operand is true)
    !: Logical NOT (negates the operand)

Bitwise Operators
These operators perform operations on the individual bits of integers.
    &: Bitwise AND
    |: Bitwise OR
    ^: Bitwise XOR (exclusive OR)
    &^: Bit clear (AND NOT)
    <<: Left shift
    >>: Right shift


Assignment Operators
These operators assign a value to a variable.
    =: Simple assignment
    +=: Add and assign
    -=: Subtract and assign
    *=: Multiply and assign
    /=: Divide and assign
    %=: Modulus and assign
    &=: Bitwise AND and assign
    |=: Bitwise OR and assign
    ^=: Bitwise XOR and assign
    &^=: Bit clear and assign
    <<=: Left shift and assign
    >>=: Right shift and assign    